---
#########################################################################################
# DESCRIPTION:
#  Ansible playbook to perform mass updates on Ansible Tower job templates to replace
#  an existing credential with a new one.
#  The playbook is intended to be run as a job template from within Ansible Tower and should 
#  use a credential of type "Ansible Tower", which includes the Tower URL and either API token 
#  or a username and password for authenticating with the Tower API.
#
# The playbook accept the following variables:
#   "credential_name":      *(Required) The name of the credential to be replaced.
#   "new_credential_name":  *(Required) The name of the new credential that will replace the existing one.
#   "template_names":       (Optional) A list of job template names to update. If provided, only the specified templates 
#                           will be updated. If not provided, the script will update all existing job templates that use 
#                           credential_name to replace it with new_credential_name
#
# Created 07/2025 by Sidi Cheikh
#########################################################################################

- hosts: localhost
  gather_facts: no 
  become: false
  vars:
    tower_host: '{{ lookup("env", "TOWER_HOST") }}'
    tower_username: '{{ lookup("env", "TOWER_USERNAME") }}'
    tower_password: '{{ lookup("env", "TOWER_PASSWORD") }}'
    tower_oauth_token: '{{ lookup("env", "TOWER_OAUTH_TOKEN") }}'
    tower_api_base_url : "{{tower_host}}/api/v2"
    template_names : '{{ template_names | default('') | from_yaml }}'
    # Extra variables that can be set from ansible tower:
    # credential_name: old_cred   
    # new_credential_name: new_cred
    # template_names: |-
    #  - job_template1

  tasks:

#########################################################
# Setting the API Auth Header
#########################################################

  - name: 0.1 - Set Auth header to Bearer token 
    set_fact:
      auth_header : "Bearer {{ tower_oauth_token }}"
    when:
      - tower_oauth_token is defined

  - name: 0.2 - Set Basic Auth header if username and password are provided and Auth token is not provided
    set_fact:
      auth_header : "Basic {{ (tower_username + ':' + tower_password) | b64encode }}"
    when: 
      - tower_oauth_token is undefined
      - tower_username is defined
      - tower_password is defined

  - name: 0.3 - exit with failure status if neither auth token nor username and passowrd is provided
    fail: 
      msg: "Missing auth token or username and password: please provide either an `auth_token` or a `username` and `password` to use for Api authentication"
    when: auth_header is undefined

##########################################################
# Getting the credentials details
##########################################################

  - name: 1.0 - geting the {{item}} credentials details - GET {{ tower_api_base_url }}/credentials?name={{item}}
    uri:
      url: "{{ tower_api_base_url }}/credentials?name={{item}}"
      method: GET
      headers:
        Authorization: "{{auth_header}}"
        Content-Type: "application/json"
      return_content: yes
      status_code: 200
      validate_certs: false
    register: get_creds_response
    check_mode: no
    loop:
       - "{{credential_name}}"
       - "{{new_credential_name}}"
    

  - name: 1.1 - extracting details of {{credential_name}}
    set_fact:
      old_cred_details: "{{ get_creds_response.results[0].json.results[0] }}"
    when:
      get_creds_response.results[0].json.results | length > 0

  - name: 1.2 - extracting details of {{new_credential_name}}
    set_fact:
      new_cred_details: "{{ get_creds_response.results[1].json.results[0] }}"
    when:
      get_creds_response.results[1].json.results | length > 0

  - name: 1.3 - Fail if credential {{credential_name}} not found
    fail:
      msg: Cloud not find a credential named {{credential_name}}
    when:
      old_cred_details is undefined

  - name: 1.4 - Fail if credential {{new_credential_name}} not found
    fail:
      msg: Cloud not find a credential named {{new_credential_name}}
    when:
      new_cred_details is undefined
    
############################################################
# Getting the list of job templates to update
############################################################

  - name: 2.0 - get the job templates - GET {{ tower_api_base_url }}/job_templates?credentials_name={{credential_name}}
    uri:
      url: "{{ tower_api_base_url }}/job_templates?credentials__name={{credential_name}}"
      method: GET
      headers:
        Authorization: "{{auth_header}}"
        Content-Type: "application/json"
      return_content: yes
      status_code: 200
      validate_certs: false
    check_mode: no
    register: response

  - name: 2.1 - extract response.json
    set_fact:
      job_templates: "{{ response.json.results }}"
    when: response.json.results | length  > 0 

  - name: Exsiting - Couldn't find any job templates using the credetial {{ credential_name }}
    meta: end_play 
    when: job_templates is undefined

  - name: 2.2 - filtring on the provided template_names
    set_fact:
      job_templates: "{{ job_templates | selectattr('name', 'in', template_names)}}"
    when: 
      - template_names is defined
      - template_names is not none
      - template_names | length > 0

  - name: "2.3 - Total job templates to update"
    debug:
      msg: "{{ job_templates | length }} Template(s)"

  - name: "2.3.1 - Display template names"
    debug:
      msg: 
        - the follwoing job templates will be updated
        - "{{job_templates | map(attribute='name') | list}}"


###########################################################
# Updating the job templates
###########################################################

  - name: "4.0 - Updating the job templates"
    include_tasks:
      file: tower_jobtemplate_cred_update__sub_tasks.yml
    loop: "{{job_templates}}"
    loop_control: 
      loop_var: template


    

  

  